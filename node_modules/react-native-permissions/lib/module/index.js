import { NativeModules, PermissionsAndroid, Platform } from 'react-native';
import { ANDROID, IOS, PERMISSIONS, RESULTS } from './constants';
const RNPermissions = NativeModules.RNPermissions; // Produce an error if we don't have the native module

if (RNPermissions == null) {
  throw new Error("react-native-permissions: NativeModule.RNPermissions is null. To fix this issue try these steps:\n\u2022 If you are using CocoaPods on iOS, run `pod install` in the `ios` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n* If you are getting this error while unit testing you need to mock the native module. Follow the guide in the README.\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-permissions");
}

const platformPermissions = Platform.select({
  ios: Object.values(IOS),
  android: Object.values(ANDROID),
  default: []
});

function isPlatformPermission(permission) {
  if (platformPermissions.includes(permission)) {
    return true;
  }

  if (__DEV__) {
    let message = '';
    message += "Invalid ".concat(Platform.OS, " permission \"").concat(permission, "\".");
    message += ' Must be one of:\n\n• ';
    message += platformPermissions.join('\n• ');
    console.error(message);
  }

  return false;
}

export function openSettings() {
  return RNPermissions.openSettings().then(() => {});
}
export async function check(permission) {
  if (!isPlatformPermission(permission)) {
    return RESULTS.UNAVAILABLE;
  }

  if (Platform.OS === 'ios') {
    return RNPermissions.check(permission);
  }

  const available = await RNPermissions.isAvailable(permission);

  if (!available) {
    return RESULTS.UNAVAILABLE;
  } // eslint-disable-next-line @typescript-eslint/no-explicit-any


  if (await PermissionsAndroid.check(permission)) {
    return RESULTS.GRANTED;
  }

  const nonRequestables = await RNPermissions.getNonRequestables();
  return nonRequestables.includes(permission) ? RESULTS.BLOCKED : RESULTS.DENIED;
}
export async function request(permission, rationale) {
  if (!isPlatformPermission(permission)) {
    return RESULTS.UNAVAILABLE;
  }

  if (Platform.OS === 'ios') {
    return RNPermissions.request(permission);
  }

  const available = await RNPermissions.isAvailable(permission);

  if (!available) {
    return RESULTS.UNAVAILABLE;
  }

  const status = await PermissionsAndroid.request( // eslint-disable-next-line @typescript-eslint/no-explicit-any
  permission, rationale);

  if (status === 'granted') {
    return RESULTS.GRANTED;
  }

  if (status === 'denied') {
    return RESULTS.DENIED;
  }

  if (status === 'never_ask_again') {
    await RNPermissions.setNonRequestable(permission);
    return RESULTS.BLOCKED;
  }

  return RESULTS.UNAVAILABLE;
}
export function checkNotifications() {
  return RNPermissions.checkNotifications();
}
export function requestNotifications(options) {
  return RNPermissions.requestNotifications(options);
}
export * from './types';
export { PERMISSIONS, RESULTS } from './constants';
export default {
  PERMISSIONS,
  RESULTS,
  openSettings,
  check,
  request,
  checkNotifications,
  requestNotifications
};
//# sourceMappingURL=index.js.map