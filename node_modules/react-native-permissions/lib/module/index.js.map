{"version":3,"sources":["index.ts"],"names":["NativeModules","PermissionsAndroid","Platform","ANDROID","IOS","PERMISSIONS","RESULTS","RNPermissions","Error","platformPermissions","select","ios","Object","values","android","default","isPlatformPermission","permission","includes","__DEV__","message","OS","join","console","error","openSettings","then","check","UNAVAILABLE","available","isAvailable","GRANTED","nonRequestables","getNonRequestables","BLOCKED","DENIED","request","rationale","status","setNonRequestable","checkNotifications","requestNotifications","options"],"mappings":"AAAA,SACEA,aADF,EAEEC,kBAFF,EAGEC,QAHF,QAKO,cALP;AAcA,SAAQC,OAAR,EAAiBC,GAAjB,EAAsBC,WAAtB,EAAmCC,OAAnC,QAAiD,aAAjD;AAEA,MAAMC,aAmBL,GAAGP,aAAa,CAACO,aAnBlB,C,CAqBA;;AACA,IAAIA,aAAa,IAAI,IAArB,EAA2B;AACzB,QAAM,IAAIC,KAAJ,giBAAN;AAID;;AAED,MAAMC,mBAAmB,GAAGP,QAAQ,CAACQ,MAAT,CAA8B;AACxDC,EAAAA,GAAG,EAAEC,MAAM,CAACC,MAAP,CAAcT,GAAd,CADmD;AAExDU,EAAAA,OAAO,EAAEF,MAAM,CAACC,MAAP,CAAcV,OAAd,CAF+C;AAGxDY,EAAAA,OAAO,EAAE;AAH+C,CAA9B,CAA5B;;AAMA,SAASC,oBAAT,CAA8BC,UAA9B,EAA+D;AAC7D,MAAIR,mBAAmB,CAACS,QAApB,CAA6BD,UAA7B,CAAJ,EAA8C;AAC5C,WAAO,IAAP;AACD;;AAED,MAAIE,OAAJ,EAAa;AACX,QAAIC,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,sBAAelB,QAAQ,CAACmB,EAAxB,2BAA0CJ,UAA1C,QAAP;AACAG,IAAAA,OAAO,IAAI,wBAAX;AACAA,IAAAA,OAAO,IAAIX,mBAAmB,CAACa,IAApB,CAAyB,MAAzB,CAAX;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcJ,OAAd;AACD;;AAED,SAAO,KAAP;AACD;;AAED,OAAO,SAASK,YAAT,GAAuC;AAC5C,SAAOlB,aAAa,CAACkB,YAAd,GAA6BC,IAA7B,CAAkC,MAAM,CAAE,CAA1C,CAAP;AACD;AAED,OAAO,eAAeC,KAAf,CAAqBV,UAArB,EAAwE;AAC7E,MAAI,CAACD,oBAAoB,CAACC,UAAD,CAAzB,EAAuC;AACrC,WAAOX,OAAO,CAACsB,WAAf;AACD;;AAED,MAAI1B,QAAQ,CAACmB,EAAT,KAAgB,KAApB,EAA2B;AACzB,WAAOd,aAAa,CAACoB,KAAd,CAAoBV,UAApB,CAAP;AACD;;AAED,QAAMY,SAAS,GAAG,MAAMtB,aAAa,CAACuB,WAAd,CAA0Bb,UAA1B,CAAxB;;AAEA,MAAI,CAACY,SAAL,EAAgB;AACd,WAAOvB,OAAO,CAACsB,WAAf;AACD,GAb4E,CAe7E;;;AACA,MAAI,MAAM3B,kBAAkB,CAAC0B,KAAnB,CAAyBV,UAAzB,CAAV,EAAuD;AACrD,WAAOX,OAAO,CAACyB,OAAf;AACD;;AAED,QAAMC,eAAe,GAAG,MAAMzB,aAAa,CAAC0B,kBAAd,EAA9B;AAEA,SAAOD,eAAe,CAACd,QAAhB,CAAyBD,UAAzB,IACHX,OAAO,CAAC4B,OADL,GAEH5B,OAAO,CAAC6B,MAFZ;AAGD;AAED,OAAO,eAAeC,OAAf,CACLnB,UADK,EAELoB,SAFK,EAGsB;AAC3B,MAAI,CAACrB,oBAAoB,CAACC,UAAD,CAAzB,EAAuC;AACrC,WAAOX,OAAO,CAACsB,WAAf;AACD;;AAED,MAAI1B,QAAQ,CAACmB,EAAT,KAAgB,KAApB,EAA2B;AACzB,WAAOd,aAAa,CAAC6B,OAAd,CAAsBnB,UAAtB,CAAP;AACD;;AAED,QAAMY,SAAS,GAAG,MAAMtB,aAAa,CAACuB,WAAd,CAA0Bb,UAA1B,CAAxB;;AAEA,MAAI,CAACY,SAAL,EAAgB;AACd,WAAOvB,OAAO,CAACsB,WAAf;AACD;;AAED,QAAMU,MAAM,GAAG,MAAMrC,kBAAkB,CAACmC,OAAnB,EACnB;AACAnB,EAAAA,UAFmB,EAGnBoB,SAHmB,CAArB;;AAMA,MAAIC,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAOhC,OAAO,CAACyB,OAAf;AACD;;AAED,MAAIO,MAAM,KAAK,QAAf,EAAyB;AACvB,WAAOhC,OAAO,CAAC6B,MAAf;AACD;;AAED,MAAIG,MAAM,KAAK,iBAAf,EAAkC;AAChC,UAAM/B,aAAa,CAACgC,iBAAd,CAAgCtB,UAAhC,CAAN;AACA,WAAOX,OAAO,CAAC4B,OAAf;AACD;;AAED,SAAO5B,OAAO,CAACsB,WAAf;AACD;AAED,OAAO,SAASY,kBAAT,GAA8D;AACnE,SAAOjC,aAAa,CAACiC,kBAAd,EAAP;AACD;AAED,OAAO,SAASC,oBAAT,CACLC,OADK,EAE2B;AAChC,SAAOnC,aAAa,CAACkC,oBAAd,CAAmCC,OAAnC,CAAP;AACD;AAED,cAAc,SAAd;AACA,SAAQrC,WAAR,EAAqBC,OAArB,QAAmC,aAAnC;AAEA,eAAe;AACbD,EAAAA,WADa;AAEbC,EAAAA,OAFa;AAGbmB,EAAAA,YAHa;AAIbE,EAAAA,KAJa;AAKbS,EAAAA,OALa;AAMbI,EAAAA,kBANa;AAObC,EAAAA;AAPa,CAAf","sourcesContent":["import {\n  NativeModules,\n  PermissionsAndroid,\n  Platform,\n  Rationale,\n} from 'react-native';\n\nimport {\n  NotificationOption,\n  NotificationsResponse,\n  Permission,\n  PermissionStatus,\n} from './types';\n\nimport {ANDROID, IOS, PERMISSIONS, RESULTS} from './constants';\n\nconst RNPermissions: {\n  // Android + iOS\n  checkNotifications: () => Promise<NotificationsResponse>;\n  requestNotifications: (\n    options: NotificationOption[],\n  ) => Promise<NotificationsResponse>;\n  openSettings: () => Promise<true>;\n\n  // Android only\n  isAvailable: (permission: Permission) => Promise<boolean>;\n  getNonRequestables: () => Promise<Permission[]>;\n  setNonRequestable: (permission: Permission) => Promise<true>;\n\n  // iOS only\n  check: (permission: Permission) => Promise<PermissionStatus>;\n  request: (\n    permission: Permission,\n    rationale?: Rationale,\n  ) => Promise<PermissionStatus>;\n} = NativeModules.RNPermissions;\n\n// Produce an error if we don't have the native module\nif (RNPermissions == null) {\n  throw new Error(`react-native-permissions: NativeModule.RNPermissions is null. To fix this issue try these steps:\n• If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n* If you are getting this error while unit testing you need to mock the native module. Follow the guide in the README.\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-permissions`);\n}\n\nconst platformPermissions = Platform.select<Permission[]>({\n  ios: Object.values(IOS),\n  android: Object.values(ANDROID),\n  default: [],\n});\n\nfunction isPlatformPermission(permission: Permission): boolean {\n  if (platformPermissions.includes(permission)) {\n    return true;\n  }\n\n  if (__DEV__) {\n    let message = '';\n    message += `Invalid ${Platform.OS} permission \"${permission}\".`;\n    message += ' Must be one of:\\n\\n• ';\n    message += platformPermissions.join('\\n• ');\n    console.error(message);\n  }\n\n  return false;\n}\n\nexport function openSettings(): Promise<void> {\n  return RNPermissions.openSettings().then(() => {});\n}\n\nexport async function check(permission: Permission): Promise<PermissionStatus> {\n  if (!isPlatformPermission(permission)) {\n    return RESULTS.UNAVAILABLE;\n  }\n\n  if (Platform.OS === 'ios') {\n    return RNPermissions.check(permission);\n  }\n\n  const available = await RNPermissions.isAvailable(permission);\n\n  if (!available) {\n    return RESULTS.UNAVAILABLE;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (await PermissionsAndroid.check(permission as any)) {\n    return RESULTS.GRANTED;\n  }\n\n  const nonRequestables = await RNPermissions.getNonRequestables();\n\n  return nonRequestables.includes(permission)\n    ? RESULTS.BLOCKED\n    : RESULTS.DENIED;\n}\n\nexport async function request(\n  permission: Permission,\n  rationale?: Rationale,\n): Promise<PermissionStatus> {\n  if (!isPlatformPermission(permission)) {\n    return RESULTS.UNAVAILABLE;\n  }\n\n  if (Platform.OS === 'ios') {\n    return RNPermissions.request(permission);\n  }\n\n  const available = await RNPermissions.isAvailable(permission);\n\n  if (!available) {\n    return RESULTS.UNAVAILABLE;\n  }\n\n  const status = await PermissionsAndroid.request(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    permission as any,\n    rationale,\n  );\n\n  if (status === 'granted') {\n    return RESULTS.GRANTED;\n  }\n\n  if (status === 'denied') {\n    return RESULTS.DENIED;\n  }\n\n  if (status === 'never_ask_again') {\n    await RNPermissions.setNonRequestable(permission);\n    return RESULTS.BLOCKED;\n  }\n\n  return RESULTS.UNAVAILABLE;\n}\n\nexport function checkNotifications(): Promise<NotificationsResponse> {\n  return RNPermissions.checkNotifications();\n}\n\nexport function requestNotifications(\n  options: NotificationOption[],\n): Promise<NotificationsResponse> {\n  return RNPermissions.requestNotifications(options);\n}\n\nexport * from './types';\nexport {PERMISSIONS, RESULTS} from './constants';\n\nexport default {\n  PERMISSIONS,\n  RESULTS,\n  openSettings,\n  check,\n  request,\n  checkNotifications,\n  requestNotifications,\n};\n"]}