"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  openSettings: true,
  check: true,
  request: true,
  checkNotifications: true,
  requestNotifications: true,
  PERMISSIONS: true,
  RESULTS: true
};
exports.openSettings = openSettings;
exports.check = check;
exports.request = request;
exports.checkNotifications = checkNotifications;
exports.requestNotifications = requestNotifications;
Object.defineProperty(exports, "PERMISSIONS", {
  enumerable: true,
  get: function get() {
    return _constants.PERMISSIONS;
  }
});
Object.defineProperty(exports, "RESULTS", {
  enumerable: true,
  get: function get() {
    return _constants.RESULTS;
  }
});
exports.default = void 0;

var _reactNative = require("react-native");

var _constants = require("./constants");

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _types[key];
    }
  });
});
const RNPermissions = _reactNative.NativeModules.RNPermissions; // Produce an error if we don't have the native module

if (RNPermissions == null) {
  throw new Error("react-native-permissions: NativeModule.RNPermissions is null. To fix this issue try these steps:\n\u2022 If you are using CocoaPods on iOS, run `pod install` in the `ios` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n* If you are getting this error while unit testing you need to mock the native module. Follow the guide in the README.\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-permissions");
}

const platformPermissions = _reactNative.Platform.select({
  ios: Object.values(_constants.IOS),
  android: Object.values(_constants.ANDROID),
  default: []
});

function isPlatformPermission(permission) {
  if (platformPermissions.includes(permission)) {
    return true;
  }

  if (__DEV__) {
    let message = '';
    message += "Invalid ".concat(_reactNative.Platform.OS, " permission \"").concat(permission, "\".");
    message += ' Must be one of:\n\n• ';
    message += platformPermissions.join('\n• ');
    console.error(message);
  }

  return false;
}

function openSettings() {
  return RNPermissions.openSettings().then(() => {});
}

async function check(permission) {
  if (!isPlatformPermission(permission)) {
    return _constants.RESULTS.UNAVAILABLE;
  }

  if (_reactNative.Platform.OS === 'ios') {
    return RNPermissions.check(permission);
  }

  const available = await RNPermissions.isAvailable(permission);

  if (!available) {
    return _constants.RESULTS.UNAVAILABLE;
  } // eslint-disable-next-line @typescript-eslint/no-explicit-any


  if (await _reactNative.PermissionsAndroid.check(permission)) {
    return _constants.RESULTS.GRANTED;
  }

  const nonRequestables = await RNPermissions.getNonRequestables();
  return nonRequestables.includes(permission) ? _constants.RESULTS.BLOCKED : _constants.RESULTS.DENIED;
}

async function request(permission, rationale) {
  if (!isPlatformPermission(permission)) {
    return _constants.RESULTS.UNAVAILABLE;
  }

  if (_reactNative.Platform.OS === 'ios') {
    return RNPermissions.request(permission);
  }

  const available = await RNPermissions.isAvailable(permission);

  if (!available) {
    return _constants.RESULTS.UNAVAILABLE;
  }

  const status = await _reactNative.PermissionsAndroid.request( // eslint-disable-next-line @typescript-eslint/no-explicit-any
  permission, rationale);

  if (status === 'granted') {
    return _constants.RESULTS.GRANTED;
  }

  if (status === 'denied') {
    return _constants.RESULTS.DENIED;
  }

  if (status === 'never_ask_again') {
    await RNPermissions.setNonRequestable(permission);
    return _constants.RESULTS.BLOCKED;
  }

  return _constants.RESULTS.UNAVAILABLE;
}

function checkNotifications() {
  return RNPermissions.checkNotifications();
}

function requestNotifications(options) {
  return RNPermissions.requestNotifications(options);
}

var _default = {
  PERMISSIONS: _constants.PERMISSIONS,
  RESULTS: _constants.RESULTS,
  openSettings,
  check,
  request,
  checkNotifications,
  requestNotifications
};
exports.default = _default;
//# sourceMappingURL=index.js.map